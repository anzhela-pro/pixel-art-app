
import { GoogleGenAI, Type } from "@google/genai";
import type { GifConcept } from "../types";

const API_KEY = process.env.API_KEY;

if (!API_KEY) {
  throw new Error("API_KEY environment variable is not set.");
}

const ai = new GoogleGenAI({ apiKey: API_KEY });

async function generatePromptsForTheme(theme: string): Promise<string[]> {
  try {
    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: `Generate a list of 6 diverse and highly specific prompts for generating GIF keyframe images based on the theme: "${theme}". The prompts should be creative, visually descriptive, and suitable for a static image that implies motion or a moment.`,
      config: {
        responseMimeType: "application/json",
        responseSchema: {
          type: Type.OBJECT,
          properties: {
            prompts: {
              type: Type.ARRAY,
              items: { type: Type.STRING },
            },
          },
        },
        temperature: 0.9,
      },
    });

    const jsonText = response.text.trim();
    const result = JSON.parse(jsonText);
    
    if (result.prompts && Array.isArray(result.prompts) && result.prompts.length > 0) {
      return result.prompts;
    } else {
      throw new Error("AI did not return valid prompts.");
    }
  } catch (error) {
    console.error("Error generating prompts:", error);
    throw new Error("Failed to brainstorm GIF ideas from the AI.");
  }
}

async function generateImageForPrompt(prompt: string): Promise<string> {
    try {
        const response = await ai.models.generateImages({
            model: 'imagen-3.0-generate-002',
            prompt: `A vibrant, high-quality, cinematic still image representing a keyframe for a GIF. Prompt: "${prompt}"`,
            config: {
                numberOfImages: 1,
                outputMimeType: 'image/jpeg',
                aspectRatio: '1:1',
            },
        });

        if (response.generatedImages && response.generatedImages.length > 0) {
            const base64ImageBytes = response.generatedImages[0].image.imageBytes;
            return `data:image/jpeg;base64,${base64ImageBytes}`;
        } else {
            throw new Error("No image was generated by the API.");
        }
    } catch (error) {
        console.error(`Error generating image for prompt "${prompt}":`, error);
        // Return a placeholder or throw to indicate failure for this specific image
        throw new Error(`Failed to generate an image for one of the prompts.`);
    }
}


export async function generateGifConcepts(theme: string): Promise<GifConcept[]> {
  const prompts = await generatePromptsForTheme(theme);
  
  const imageGenerationPromises = prompts.map(prompt => 
    generateImageForPrompt(prompt).then(imageUrl => ({ prompt, imageUrl }))
  );

  const results = await Promise.allSettled(imageGenerationPromises);
  
  const successfulConcepts: GifConcept[] = [];
  results.forEach(result => {
    if (result.status === 'fulfilled') {
      successfulConcepts.push(result.value);
    } else {
      // Optionally log or handle failed image generations
      console.warn('A GIF concept failed to generate:', result.reason);
    }
  });

  if (successfulConcepts.length === 0) {
      throw new Error("Could not generate any images for the given theme. Please try a different theme.");
  }

  return successfulConcepts;
}
